// Generated by psc-bundle 0.10.7
var PS = {};
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Category = PS["Control.Category"];
  var flip = function (f) {
      return function (b) {
          return function (a) {
              return f(a)(b);
          };
      };
  };
  var $$const = function (a) {
      return function (v) {
          return a;
      };
  };
  exports["const"] = $$const;
  exports["flip"] = flip;
})(PS["Data.Function"] = PS["Data.Function"] || {});
(function(exports) {
    "use strict";

  exports.unit = {};
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
    "use strict";

  exports.showIntImpl = function (n) {
    return n.toString();
  };

  exports.showStringImpl = function (s) {
    var l = s.length;
    return "\"" + s.replace(
      /[\0-\x1F\x7F"\\]/g,
      function (c, i) { // jshint ignore:line
        switch (c) {
          case "\"":
          case "\\":
            return "\\" + c;
          case "\x07": return "\\a";
          case "\b": return "\\b";
          case "\f": return "\\f";
          case "\n": return "\\n";
          case "\r": return "\\r";
          case "\t": return "\\t";
          case "\v": return "\\v";
        }
        var k = i + 1;
        var empty = k < l && s[k] >= "0" && s[k] <= "9" ? "\\&" : "";
        return "\\" + c.charCodeAt(0).toString(10) + empty;
      }
    ) + "\"";
  };

  exports.showArrayImpl = function (f) {
    return function (xs) {
      var ss = [];
      for (var i = 0, l = xs.length; i < l; i++) {
        ss[i] = f(xs[i]);
      }
      return "[" + ss.join(",") + "]";
    };
  };
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Show"];     
  var Show = function (show) {
      this.show = show;
  };
  var showString = new Show($foreign.showStringImpl);
  var showInt = new Show($foreign.showIntImpl);
  var show = function (dict) {
      return dict.show;
  };
  var showArray = function (dictShow) {
      return new Show($foreign.showArrayImpl(show(dictShow)));
  };
  exports["Show"] = Show;
  exports["show"] = show;
  exports["showInt"] = showInt;
  exports["showString"] = showString;
  exports["showArray"] = showArray;
})(PS["Data.Show"] = PS["Data.Show"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  exports["unit"] = $foreign.unit;
})(PS["Data.Unit"] = PS["Data.Unit"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var Functor = function (map) {
      this.map = map;
  };
  var map = function (dict) {
      return dict.map;
  };
  exports["Functor"] = Functor;
  exports["map"] = map;
})(PS["Data.Functor"] = PS["Data.Functor"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Apply = function (__superclass_Data$dotFunctor$dotFunctor_0, apply) {
      this["__superclass_Data.Functor.Functor_0"] = __superclass_Data$dotFunctor$dotFunctor_0;
      this.apply = apply;
  };                      
  var apply = function (dict) {
      return dict.apply;
  };
  exports["Apply"] = Apply;
  exports["apply"] = apply;
})(PS["Control.Apply"] = PS["Control.Apply"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Apply = PS["Control.Apply"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Applicative = function (__superclass_Control$dotApply$dotApply_0, pure) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.pure = pure;
  };
  var pure = function (dict) {
      return dict.pure;
  };
  var liftA1 = function (dictApplicative) {
      return function (f) {
          return function (a) {
              return Control_Apply.apply(dictApplicative["__superclass_Control.Apply.Apply_0"]())(pure(dictApplicative)(f))(a);
          };
      };
  };
  exports["Applicative"] = Applicative;
  exports["liftA1"] = liftA1;
  exports["pure"] = pure;
})(PS["Control.Applicative"] = PS["Control.Applicative"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Category = PS["Control.Category"];
  var Data_Function = PS["Data.Function"];
  var Data_Functor = PS["Data.Functor"];        
  var Bind = function (__superclass_Control$dotApply$dotApply_0, bind) {
      this["__superclass_Control.Apply.Apply_0"] = __superclass_Control$dotApply$dotApply_0;
      this.bind = bind;
  };                     
  var bind = function (dict) {
      return dict.bind;
  };
  exports["Bind"] = Bind;
  exports["bind"] = bind;
})(PS["Control.Bind"] = PS["Control.Bind"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var Monad = function (__superclass_Control$dotApplicative$dotApplicative_0, __superclass_Control$dotBind$dotBind_1) {
      this["__superclass_Control.Applicative.Applicative_0"] = __superclass_Control$dotApplicative$dotApplicative_0;
      this["__superclass_Control.Bind.Bind_1"] = __superclass_Control$dotBind$dotBind_1;
  };
  var ap = function (dictMonad) {
      return function (f) {
          return function (a) {
              return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(f)(function (v) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(a)(function (v1) {
                      return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(v(v1));
                  });
              });
          };
      };
  };
  exports["Monad"] = Monad;
  exports["ap"] = ap;
})(PS["Control.Monad"] = PS["Control.Monad"] || {});
(function(exports) {
    "use strict";

  exports.pureE = function (a) {
    return function () {
      return a;
    };
  };

  exports.bindE = function (a) {
    return function (f) {
      return function () {
        return f(a())();
      };
    };
  };

  exports.runPure = function (f) {
    return f();
  };
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Unit = PS["Data.Unit"];        
  var monadEff = new Control_Monad.Monad(function () {
      return applicativeEff;
  }, function () {
      return bindEff;
  });
  var bindEff = new Control_Bind.Bind(function () {
      return applyEff;
  }, $foreign.bindE);
  var applyEff = new Control_Apply.Apply(function () {
      return functorEff;
  }, Control_Monad.ap(monadEff));
  var applicativeEff = new Control_Applicative.Applicative(function () {
      return applyEff;
  }, $foreign.pureE);
  var functorEff = new Data_Functor.Functor(Control_Applicative.liftA1(applicativeEff));
  exports["functorEff"] = functorEff;
  exports["applyEff"] = applyEff;
  exports["applicativeEff"] = applicativeEff;
  exports["bindEff"] = bindEff;
  exports["monadEff"] = monadEff;
  exports["runPure"] = $foreign.runPure;
})(PS["Control.Monad.Eff"] = PS["Control.Monad.Eff"] || {});
(function(exports) {
    "use strict";

  exports.log = function (s) {
    return function () {
      console.log(s);
      return {};
    };
  };
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Console"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  exports["log"] = $foreign.log;
})(PS["Control.Monad.Eff.Console"] = PS["Control.Monad.Eff.Console"] || {});
(function(exports) {
    "use strict";

  exports.unsafeCoerceEff = function (f) {
    return f;
  };
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var unsafePerformEff = function ($0) {
      return Control_Monad_Eff.runPure($foreign.unsafeCoerceEff($0));
  };
  exports["unsafePerformEff"] = unsafePerformEff;
})(PS["Control.Monad.Eff.Unsafe"] = PS["Control.Monad.Eff.Unsafe"] || {});
(function(exports) {
    "use strict";

  exports.foldrArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = len - 1; i >= 0; i--) {
          acc = f(xs[i])(acc);
        }
        return acc;
      };
    };
  };

  exports.foldlArray = function (f) {
    return function (init) {
      return function (xs) {
        var acc = init;
        var len = xs.length;
        for (var i = 0; i < len; i++) {
          acc = f(acc)(xs[i]);
        }
        return acc;
      };
    };
  };
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
    "use strict";

  exports.concatString = function (s1) {
    return function (s2) {
      return s1 + s2;
    };
  };

  exports.concatArray = function (xs) {
    return function (ys) {
      if (xs.length === 0) return ys;
      if (ys.length === 0) return xs;
      return xs.concat(ys);
    };
  };
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Void = PS["Data.Void"];        
  var Semigroup = function (append) {
      this.append = append;
  }; 
  var semigroupString = new Semigroup($foreign.concatString);
  var semigroupArray = new Semigroup($foreign.concatArray);
  var append = function (dict) {
      return dict.append;
  };
  exports["Semigroup"] = Semigroup;
  exports["append"] = append;
  exports["semigroupString"] = semigroupString;
  exports["semigroupArray"] = semigroupArray;
})(PS["Data.Semigroup"] = PS["Data.Semigroup"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Eq = PS["Data.Eq"];
  var Data_EuclideanRing = PS["Data.EuclideanRing"];
  var Data_Boolean = PS["Data.Boolean"];        
  var Monoid = function (__superclass_Data$dotSemigroup$dotSemigroup_0, mempty) {
      this["__superclass_Data.Semigroup.Semigroup_0"] = __superclass_Data$dotSemigroup$dotSemigroup_0;
      this.mempty = mempty;
  };                 
  var monoidString = new Monoid(function () {
      return Data_Semigroup.semigroupString;
  }, "");  
  var mempty = function (dict) {
      return dict.mempty;
  };
  exports["Monoid"] = Monoid;
  exports["mempty"] = mempty;
  exports["monoidString"] = monoidString;
})(PS["Data.Monoid"] = PS["Data.Monoid"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Show = PS["Data.Show"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];        
  var Nothing = (function () {
      function Nothing() {

      };
      Nothing.value = new Nothing();
      return Nothing;
  })();
  var Just = (function () {
      function Just(value0) {
          this.value0 = value0;
      };
      Just.create = function (value0) {
          return new Just(value0);
      };
      return Just;
  })();                                                   
  var functorMaybe = new Data_Functor.Functor(function (v) {
      return function (v1) {
          if (v1 instanceof Just) {
              return new Just(v(v1.value0));
          };
          return Nothing.value;
      };
  });
  var applyMaybe = new Control_Apply.Apply(function () {
      return functorMaybe;
  }, function (v) {
      return function (v1) {
          if (v instanceof Just) {
              return Data_Functor.map(functorMaybe)(v.value0)(v1);
          };
          if (v instanceof Nothing) {
              return Nothing.value;
          };
          throw new Error("Failed pattern match at Data.Maybe line 67, column 3 - line 67, column 31: " + [ v.constructor.name, v1.constructor.name ]);
      };
  });
  exports["Nothing"] = Nothing;
  exports["Just"] = Just;
  exports["functorMaybe"] = functorMaybe;
  exports["applyMaybe"] = applyMaybe;
})(PS["Data.Maybe"] = PS["Data.Maybe"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Foldable"];
  var Prelude = PS["Prelude"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Maybe_Last = PS["Data.Maybe.Last"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Monoid_Additive = PS["Data.Monoid.Additive"];
  var Data_Monoid_Conj = PS["Data.Monoid.Conj"];
  var Data_Monoid_Disj = PS["Data.Monoid.Disj"];
  var Data_Monoid_Dual = PS["Data.Monoid.Dual"];
  var Data_Monoid_Endo = PS["Data.Monoid.Endo"];
  var Data_Monoid_Multiplicative = PS["Data.Monoid.Multiplicative"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Function = PS["Data.Function"];
  var Control_Category = PS["Control.Category"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Functor = PS["Data.Functor"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];        
  var Foldable = function (foldMap, foldl, foldr) {
      this.foldMap = foldMap;
      this.foldl = foldl;
      this.foldr = foldr;
  };
  var foldr = function (dict) {
      return dict.foldr;
  };
  var foldl = function (dict) {
      return dict.foldl;
  };
  var intercalate = function (dictFoldable) {
      return function (dictMonoid) {
          return function (sep) {
              return function (xs) {
                  var go = function (v) {
                      return function (x) {
                          if (v.init) {
                              return {
                                  init: false, 
                                  acc: x
                              };
                          };
                          return {
                              init: false, 
                              acc: Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(v.acc)(Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(sep)(x))
                          };
                      };
                  };
                  return (foldl(dictFoldable)(go)({
                      init: true, 
                      acc: Data_Monoid.mempty(dictMonoid)
                  })(xs)).acc;
              };
          };
      };
  }; 
  var foldMapDefaultR = function (dictFoldable) {
      return function (dictMonoid) {
          return function (f) {
              return function (xs) {
                  return foldr(dictFoldable)(function (x) {
                      return function (acc) {
                          return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(f(x))(acc);
                      };
                  })(Data_Monoid.mempty(dictMonoid))(xs);
              };
          };
      };
  };
  var foldableArray = new Foldable(function (dictMonoid) {
      return foldMapDefaultR(foldableArray)(dictMonoid);
  }, $foreign.foldlArray, $foreign.foldrArray);
  var foldMap = function (dict) {
      return dict.foldMap;
  };
  exports["Foldable"] = Foldable;
  exports["foldMap"] = foldMap;
  exports["foldMapDefaultR"] = foldMapDefaultR;
  exports["foldl"] = foldl;
  exports["foldr"] = foldr;
  exports["intercalate"] = intercalate;
  exports["foldableArray"] = foldableArray;
})(PS["Data.Foldable"] = PS["Data.Foldable"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Biapplicative = PS["Control.Biapplicative"];
  var Control_Biapply = PS["Control.Biapply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_Lazy = PS["Control.Lazy"];
  var Data_Bifoldable = PS["Data.Bifoldable"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Bitraversable = PS["Data.Bitraversable"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Functor_Invariant = PS["Data.Functor.Invariant"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Maybe_First = PS["Data.Maybe.First"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Bounded = PS["Data.Bounded"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Semiring = PS["Data.Semiring"];
  var Data_Ring = PS["Data.Ring"];
  var Data_CommutativeRing = PS["Data.CommutativeRing"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Data_Function = PS["Data.Function"];
  var Data_Unit = PS["Data.Unit"];        
  var Tuple = (function () {
      function Tuple(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Tuple.create = function (value0) {
          return function (value1) {
              return new Tuple(value0, value1);
          };
      };
      return Tuple;
  })();
  var snd = function (v) {
      return v.value1;
  };
  var functorTuple = new Data_Functor.Functor(function (f) {
      return function (v) {
          return new Tuple(v.value0, f(v.value1));
      };
  });                                                                                                   
  var fst = function (v) {
      return v.value0;
  };
  exports["Tuple"] = Tuple;
  exports["fst"] = fst;
  exports["snd"] = snd;
  exports["functorTuple"] = functorTuple;
})(PS["Data.Tuple"] = PS["Data.Tuple"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];        
  var MonadState = function (__superclass_Control$dotMonad$dotMonad_0, state) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.state = state;
  };
  var state = function (dict) {
      return dict.state;
  };
  var put = function (dictMonadState) {
      return function (s) {
          return state(dictMonadState)(function (v) {
              return new Data_Tuple.Tuple(Data_Unit.unit, s);
          });
      };
  };
  var get = function (dictMonadState) {
      return state(dictMonadState)(function (s) {
          return new Data_Tuple.Tuple(s, s);
      });
  };
  exports["MonadState"] = MonadState;
  exports["get"] = get;
  exports["put"] = put;
  exports["state"] = state;
})(PS["Control.Monad.State.Class"] = PS["Control.Monad.State.Class"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Cont_Class = PS["Control.Monad.Cont.Class"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Error_Class = PS["Control.Monad.Error.Class"];
  var Control_Monad_Reader_Class = PS["Control.Monad.Reader.Class"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Control_Monad_Writer_Class = PS["Control.Monad.Writer.Class"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];        
  var StateT = function (x) {
      return x;
  };
  var runStateT = function (v) {
      return v;
  }; 
  var functorStateT = function (dictFunctor) {
      return new Data_Functor.Functor(function (f) {
          return function (v) {
              return function (s) {
                  return Data_Functor.map(dictFunctor)(function (v1) {
                      return new Data_Tuple.Tuple(f(v1.value0), v1.value1);
                  })(v(s));
              };
          };
      });
  };
  var monadStateT = function (dictMonad) {
      return new Control_Monad.Monad(function () {
          return applicativeStateT(dictMonad);
      }, function () {
          return bindStateT(dictMonad);
      });
  };
  var bindStateT = function (dictMonad) {
      return new Control_Bind.Bind(function () {
          return applyStateT(dictMonad);
      }, function (v) {
          return function (f) {
              return function (s) {
                  return Control_Bind.bind(dictMonad["__superclass_Control.Bind.Bind_1"]())(v(s))(function (v1) {
                      var $65 = f(v1.value0);
                      return $65(v1.value1);
                  });
              };
          };
      });
  };
  var applyStateT = function (dictMonad) {
      return new Control_Apply.Apply(function () {
          return functorStateT(((dictMonad["__superclass_Control.Bind.Bind_1"]())["__superclass_Control.Apply.Apply_0"]())["__superclass_Data.Functor.Functor_0"]());
      }, Control_Monad.ap(monadStateT(dictMonad)));
  };
  var applicativeStateT = function (dictMonad) {
      return new Control_Applicative.Applicative(function () {
          return applyStateT(dictMonad);
      }, function (a) {
          return function (s) {
              return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(new Data_Tuple.Tuple(a, s));
          };
      });
  };
  var monadStateStateT = function (dictMonad) {
      return new Control_Monad_State_Class.MonadState(function () {
          return monadStateT(dictMonad);
      }, function (f) {
          return StateT(function ($101) {
              return Control_Applicative.pure(dictMonad["__superclass_Control.Applicative.Applicative_0"]())(f($101));
          });
      });
  };
  exports["StateT"] = StateT;
  exports["runStateT"] = runStateT;
  exports["functorStateT"] = functorStateT;
  exports["applyStateT"] = applyStateT;
  exports["applicativeStateT"] = applicativeStateT;
  exports["bindStateT"] = bindStateT;
  exports["monadStateT"] = monadStateT;
  exports["monadStateStateT"] = monadStateStateT;
})(PS["Control.Monad.State.Trans"] = PS["Control.Monad.State.Trans"] || {});
(function(exports) {
  /* global exports */
  "use strict";

  exports.d3SelectFn    = function (selector)              {
      console.log("d3.select: ");
      var result = d3.select(selector);
      return result; }
  exports.d3SelectAllFn = function (selector)              {
      return d3.selectAll(selector); }
  exports.appendFn    = function (tag, selection)          {
      return selection.append(tag); }    
  exports.bindDataFn  = function (array, selection)        {
      return selection.data(array); }
  exports.bindDataFnK = function (array, keyFn, selection) {
      console.log("binding data! with an index!");
      return selection.data(array, keyFn); }
  exports.bindHierarchyFn  = function (tree, selection)        {
      return selection.data(tree); }
  exports.bindHierarchyFnK = function (tree, keyFn, selection) {
      return selection.data(tree, keyFn); }
  exports.enterFn     = function (selection)               {
      return selection.enter(); }
  exports.exitFn      = function (selection)               {
      return selection.exit(); }    
  exports.insertFn    = function (selector, selection)     {
      return selection.insert(selector); }
  exports.mergeFn     = function (other, selection)        {
      return selection.merge(other); }
  exports.removeFn    = function (selection)               {
      return selection.remove(); }
  exports.selectAllFn = function (selector, selection)     {
      return selection.selectAll(selector); }
  exports.selectFn    = function (selector, selection)     {
      return selection.select(selector); }

  // utility function to package up the parameter block for a callback
  function getCallBackParams(d, elem, prop) {
    var cbParams = { datum:     d
                   , elem:      elem
                   , prop:      prop    // NB - untyped assignment - only use in mkCallback fns
                   , timestamp: d3.event.timeStamp
                   , meta:      d3.event.metaKey
                   , shift:     d3.event.shiftKey
                   , ctrl:      d3.event.ctrlKey
                   , alt:       d3.event.altKey };
    return cbParams;
  }
})(PS["D3.Selection"] = PS["D3.Selection"] || {});
(function(exports) {

  exports.runEffFn1 = function runEffFn1(fn) {
    return function(a) {
      return function() {
        return fn(a);
      };
    };
  };

  exports.runEffFn2 = function runEffFn2(fn) {
    return function(a) {
      return function(b) {
        return function() {
          return fn(a, b);
        };
      };
    };
  };

  exports.runEffFn3 = function runEffFn3(fn) {
    return function(a) {
      return function(b) {
        return function(c) {
          return function() {
            return fn(a, b, c);
          };
        };
      };
    };
  };
})(PS["Data.Function.Eff"] = PS["Data.Function.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Function.Eff"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  exports["runEffFn1"] = $foreign.runEffFn1;
  exports["runEffFn2"] = $foreign.runEffFn2;
  exports["runEffFn3"] = $foreign.runEffFn3;
})(PS["Data.Function.Eff"] = PS["Data.Function.Eff"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["D3.Selection"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var D3_Base = PS["D3.Base"];
  var DOM_Event_Types = PS["DOM.Event.Types"];
  var Data_Function_Eff = PS["Data.Function.Eff"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Nullable = PS["Data.Nullable"];
  var Prelude = PS["Prelude"];
  var Data_Functor = PS["Data.Functor"];
  var selectAll = function (selector) {
      return Data_Function_Eff.runEffFn2($foreign.selectAllFn)(selector);
  };
  var select = function (selector) {
      return Data_Function_Eff.runEffFn2($foreign.selectFn)(selector);
  };
  var remove = Data_Function_Eff.runEffFn1($foreign.removeFn);
  var merge = Data_Function_Eff.runEffFn2($foreign.mergeFn);
  var insert = function (tag) {
      return Data_Function_Eff.runEffFn2($foreign.insertFn)(tag);
  };
  var exit = Data_Function_Eff.runEffFn1($foreign.exitFn);
  var enter = Data_Function_Eff.runEffFn1($foreign.enterFn);
  var dataBindIndexHierarchy = function (h) {
      return function (keyFn) {
          return Data_Function_Eff.runEffFn3($foreign.bindHierarchyFnK)(h)(keyFn);
      };
  };
  var dataBindIndexArray = function (d) {
      return function (keyFn) {
          return Data_Function_Eff.runEffFn3($foreign.bindDataFnK)(d)(keyFn);
      };
  };
  var dataBindHierarchy = function (h) {
      return Data_Function_Eff.runEffFn2($foreign.bindHierarchyFn)(h);
  };
  var dataBindArray = function (d) {
      return Data_Function_Eff.runEffFn2($foreign.bindDataFn)(d);
  };
  var d3SelectAll = function (selector) {
      return Data_Function_Eff.runEffFn1($foreign.d3SelectAllFn)(selector);
  };
  var d3Select = function (selector) {
      return Data_Function_Eff.runEffFn1($foreign.d3SelectFn)(selector);
  };
  var append = function (tag) {
      return Data_Function_Eff.runEffFn2($foreign.appendFn)(tag);
  };
  exports["append"] = append;
  exports["d3Select"] = d3Select;
  exports["d3SelectAll"] = d3SelectAll;
  exports["dataBindArray"] = dataBindArray;
  exports["dataBindHierarchy"] = dataBindHierarchy;
  exports["dataBindIndexArray"] = dataBindIndexArray;
  exports["dataBindIndexHierarchy"] = dataBindIndexHierarchy;
  exports["enter"] = enter;
  exports["exit"] = exit;
  exports["insert"] = insert;
  exports["merge"] = merge;
  exports["remove"] = remove;
  exports["select"] = select;
  exports["selectAll"] = selectAll;
})(PS["D3.Selection"] = PS["D3.Selection"] || {});
(function(exports) {
    "use strict";
  var Data_Newtype = PS["Data.Newtype"];
  var Prelude = PS["Prelude"];
  var Control_Apply = PS["Control.Apply"];
  var D3_Base = PS["D3.Base"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];        
  var Seconds = (function () {
      function Seconds(value0) {
          this.value0 = value0;
      };
      Seconds.create = function (value0) {
          return new Seconds(value0);
      };
      return Seconds;
  })();
  var MS = (function () {
      function MS(value0) {
          this.value0 = value0;
      };
      MS.create = function (value0) {
          return new MS(value0);
      };
      return MS;
  })();
  var SimpleTransition = (function () {
      function SimpleTransition(value0) {
          this.value0 = value0;
      };
      SimpleTransition.create = function (value0) {
          return new SimpleTransition(value0);
      };
      return SimpleTransition;
  })();
  var NamedTransition = (function () {
      function NamedTransition(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      NamedTransition.create = function (value0) {
          return function (value1) {
              return new NamedTransition(value0, value1);
          };
      };
      return NamedTransition;
  })();
  var SvgCircle = (function () {
      function SvgCircle() {

      };
      SvgCircle.value = new SvgCircle();
      return SvgCircle;
  })();
  var SvgGroup = (function () {
      function SvgGroup() {

      };
      SvgGroup.value = new SvgGroup();
      return SvgGroup;
  })();
  var SvgImage = (function () {
      function SvgImage() {

      };
      SvgImage.value = new SvgImage();
      return SvgImage;
  })();
  var SvgPath = (function () {
      function SvgPath() {

      };
      SvgPath.value = new SvgPath();
      return SvgPath;
  })();
  var SvgRect = (function () {
      function SvgRect() {

      };
      SvgRect.value = new SvgRect();
      return SvgRect;
  })();
  var SvgText = (function () {
      function SvgText() {

      };
      SvgText.value = new SvgText();
      return SvgText;
  })();
  var HTMLDiv = (function () {
      function HTMLDiv() {

      };
      HTMLDiv.value = new HTMLDiv();
      return HTMLDiv;
  })();
  var HTMLP = (function () {
      function HTMLP() {

      };
      HTMLP.value = new HTMLP();
      return HTMLP;
  })();
  var HTMLH1 = (function () {
      function HTMLH1() {

      };
      HTMLH1.value = new HTMLH1();
      return HTMLH1;
  })();
  var HTMLSpan = (function () {
      function HTMLSpan() {

      };
      HTMLSpan.value = new HTMLSpan();
      return HTMLSpan;
  })();
  var showDuration = new Data_Show.Show(function (v) {
      if (v instanceof Seconds) {
          return Data_Show.show(Data_Show.showInt)(v.value0) + "s";
      };
      if (v instanceof MS) {
          return Data_Show.show(Data_Show.showInt)(v.value0) + "ms";
      };
      throw new Error("Failed pattern match at TaglessD3.Base line 46, column 5 - line 47, column 5: " + [ v.constructor.name ]);
  });
  var showD3Transition = new Data_Show.Show(function (v) {
      if (v instanceof SimpleTransition) {
          return "Duration: " + Data_Show.show(showDuration)(v.value0);
      };
      if (v instanceof NamedTransition) {
          return "Name: " + (v.value0 + (" Duration: " + Data_Show.show(showDuration)(v.value1)));
      };
      throw new Error("Failed pattern match at TaglessD3.Base line 50, column 3 - line 50, column 57: " + [ v.constructor.name ]);
  });
  var showD3ElementType = new Data_Show.Show(function (v) {
      if (v instanceof SvgCircle) {
          return "circle";
      };
      if (v instanceof SvgGroup) {
          return "group";
      };
      if (v instanceof SvgImage) {
          return "image";
      };
      if (v instanceof SvgPath) {
          return "path";
      };
      if (v instanceof SvgRect) {
          return "rect";
      };
      if (v instanceof SvgText) {
          return "text";
      };
      if (v instanceof HTMLDiv) {
          return "div";
      };
      if (v instanceof HTMLP) {
          return "p";
      };
      if (v instanceof HTMLH1) {
          return "h1";
      };
      if (v instanceof HTMLSpan) {
          return "span";
      };
      throw new Error("Failed pattern match at TaglessD3.Base line 54, column 3 - line 55, column 3: " + [ v.constructor.name ]);
  });
  exports["SvgCircle"] = SvgCircle;
  exports["SvgGroup"] = SvgGroup;
  exports["SvgImage"] = SvgImage;
  exports["SvgPath"] = SvgPath;
  exports["SvgRect"] = SvgRect;
  exports["SvgText"] = SvgText;
  exports["HTMLDiv"] = HTMLDiv;
  exports["HTMLP"] = HTMLP;
  exports["HTMLH1"] = HTMLH1;
  exports["HTMLSpan"] = HTMLSpan;
  exports["SimpleTransition"] = SimpleTransition;
  exports["NamedTransition"] = NamedTransition;
  exports["Seconds"] = Seconds;
  exports["MS"] = MS;
  exports["showDuration"] = showDuration;
  exports["showD3Transition"] = showD3Transition;
  exports["showD3ElementType"] = showD3ElementType;
})(PS["TaglessD3.Base"] = PS["TaglessD3.Base"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Comonad = PS["Control.Comonad"];
  var Control_Extend = PS["Control.Extend"];
  var Control_MonadPlus = PS["Control.MonadPlus"];
  var Control_MonadZero = PS["Control.MonadZero"];
  var Control_Plus = PS["Control.Plus"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Generic = PS["Data.Generic"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Unit = PS["Data.Unit"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Ordering = PS["Data.Ordering"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Category = PS["Control.Category"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];        
  var Nil = (function () {
      function Nil() {

      };
      Nil.value = new Nil();
      return Nil;
  })();
  var Cons = (function () {
      function Cons(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Cons.create = function (value0) {
          return function (value1) {
              return new Cons(value0, value1);
          };
      };
      return Cons;
  })();
  var foldableList = new Data_Foldable.Foldable(function (dictMonoid) {
      return function (f) {
          return Data_Foldable.foldl(foldableList)(function (acc) {
              return function ($128) {
                  return Data_Semigroup.append(dictMonoid["__superclass_Data.Semigroup.Semigroup_0"]())(acc)(f($128));
              };
          })(Data_Monoid.mempty(dictMonoid));
      };
  }, function (f) {
      var go = function (__copy_b) {
          return function (__copy_v) {
              var b = __copy_b;
              var v = __copy_v;
              tco: while (true) {
                  if (v instanceof Nil) {
                      return b;
                  };
                  if (v instanceof Cons) {
                      var __tco_b = f(b)(v.value0);
                      var __tco_v = v.value1;
                      b = __tco_b;
                      v = __tco_v;
                      continue tco;
                  };
                  throw new Error("Failed pattern match at Data.List.Types line 66, column 3 - line 69, column 34: " + [ b.constructor.name, v.constructor.name ]);
              };
          };
      };
      return go;
  }, function (f) {
      return function (b) {
          return function (as) {
              var rev = function (__copy_acc) {
                  return function (__copy_v) {
                      var acc = __copy_acc;
                      var v = __copy_v;
                      tco: while (true) {
                          if (v instanceof Nil) {
                              return acc;
                          };
                          if (v instanceof Cons) {
                              var __tco_acc = new Cons(v.value0, acc);
                              var __tco_v = v.value1;
                              acc = __tco_acc;
                              v = __tco_v;
                              continue tco;
                          };
                          throw new Error("Failed pattern match at Data.List.Types line 62, column 3 - line 65, column 40: " + [ acc.constructor.name, v.constructor.name ]);
                      };
                  };
              };
              return Data_Foldable.foldl(foldableList)(Data_Function.flip(f))(b)(rev(Nil.value)(as));
          };
      };
  });
  exports["Nil"] = Nil;
  exports["Cons"] = Cons;
  exports["foldableList"] = foldableList;
})(PS["Data.List.Types"] = PS["Data.List.Types"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Control_Alt = PS["Control.Alt"];
  var Control_Alternative = PS["Control.Alternative"];
  var Control_Lazy = PS["Control.Lazy"];
  var Control_Monad_Rec_Class = PS["Control.Monad.Rec.Class"];
  var Data_Bifunctor = PS["Data.Bifunctor"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_NonEmpty = PS["Data.NonEmpty"];
  var Data_Traversable = PS["Data.Traversable"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unfoldable = PS["Data.Unfoldable"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Ring = PS["Data.Ring"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Ordering = PS["Data.Ordering"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Ord = PS["Data.Ord"];
  var Data_Semiring = PS["Data.Semiring"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];
  var Control_Apply = PS["Control.Apply"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Control_Category = PS["Control.Category"];
  var fromFoldable = function (dictFoldable) {
      return Data_Foldable.foldr(dictFoldable)(Data_List_Types.Cons.create)(Data_List_Types.Nil.value);
  };
  exports["fromFoldable"] = fromFoldable;
})(PS["Data.List"] = PS["Data.List"] || {});
(function(exports) {
    "use strict";

  // module Unsafe.Coerce

  exports.unsafeCoerce = function (x) {
    return x;
  };
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Unsafe.Coerce"];
  exports["unsafeCoerce"] = $foreign.unsafeCoerce;
})(PS["Unsafe.Coerce"] = PS["Unsafe.Coerce"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Unsafe_Coerce = PS["Unsafe.Coerce"];        
  var runExists = Unsafe_Coerce.unsafeCoerce;
  var mkExists = Unsafe_Coerce.unsafeCoerce;
  exports["mkExists"] = mkExists;
  exports["runExists"] = runExists;
})(PS["Data.Exists"] = PS["Data.Exists"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var D3_Base = PS["D3.Base"];
  var Data_Exists = PS["Data.Exists"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_List = PS["Data.List"];
  var Prelude = PS["Prelude"];
  var Data_Show = PS["Data.Show"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Functor = PS["Data.Functor"];
  var Data_List_Types = PS["Data.List.Types"];
  var Data_Function = PS["Data.Function"];
  var Data_Monoid = PS["Data.Monoid"];
  var Control_Applicative = PS["Control.Applicative"];
  var Data_Unit = PS["Data.Unit"];        
  var D3Attr = (function () {
      function D3Attr(value0) {
          this.value0 = value0;
      };
      D3Attr.create = function (value0) {
          return new D3Attr(value0);
      };
      return D3Attr;
  })();
  var CX = (function () {
      function CX(value0) {
          this.value0 = value0;
      };
      CX.create = function (value0) {
          return new CX(value0);
      };
      return CX;
  })();
  var CY = (function () {
      function CY(value0) {
          this.value0 = value0;
      };
      CY.create = function (value0) {
          return new CY(value0);
      };
      return CY;
  })();
  var R = (function () {
      function R(value0) {
          this.value0 = value0;
      };
      R.create = function (value0) {
          return new R(value0);
      };
      return R;
  })();
  var X = (function () {
      function X(value0) {
          this.value0 = value0;
      };
      X.create = function (value0) {
          return new X(value0);
      };
      return X;
  })();
  var Y = (function () {
      function Y(value0) {
          this.value0 = value0;
      };
      Y.create = function (value0) {
          return new Y(value0);
      };
      return Y;
  })();
  var DX = (function () {
      function DX(value0) {
          this.value0 = value0;
      };
      DX.create = function (value0) {
          return new DX(value0);
      };
      return DX;
  })();
  var DY = (function () {
      function DY(value0) {
          this.value0 = value0;
      };
      DY.create = function (value0) {
          return new DY(value0);
      };
      return DY;
  })();
  var Height = (function () {
      function Height(value0) {
          this.value0 = value0;
      };
      Height.create = function (value0) {
          return new Height(value0);
      };
      return Height;
  })();
  var Width = (function () {
      function Width(value0) {
          this.value0 = value0;
      };
      Width.create = function (value0) {
          return new Width(value0);
      };
      return Width;
  })();
  var StrokeWidth = (function () {
      function StrokeWidth(value0) {
          this.value0 = value0;
      };
      StrokeWidth.create = function (value0) {
          return new StrokeWidth(value0);
      };
      return StrokeWidth;
  })();
  var StrokeOpacity = (function () {
      function StrokeOpacity(value0) {
          this.value0 = value0;
      };
      StrokeOpacity.create = function (value0) {
          return new StrokeOpacity(value0);
      };
      return StrokeOpacity;
  })();
  var FillOpacity = (function () {
      function FillOpacity(value0) {
          this.value0 = value0;
      };
      FillOpacity.create = function (value0) {
          return new FillOpacity(value0);
      };
      return FillOpacity;
  })();
  var Opacity = (function () {
      function Opacity(value0) {
          this.value0 = value0;
      };
      Opacity.create = function (value0) {
          return new Opacity(value0);
      };
      return Opacity;
  })();
  var D = (function () {
      function D(value0) {
          this.value0 = value0;
      };
      D.create = function (value0) {
          return new D(value0);
      };
      return D;
  })();
  var Id = (function () {
      function Id(value0) {
          this.value0 = value0;
      };
      Id.create = function (value0) {
          return new Id(value0);
      };
      return Id;
  })();
  var StrokeLineCap = (function () {
      function StrokeLineCap(value0) {
          this.value0 = value0;
      };
      StrokeLineCap.create = function (value0) {
          return new StrokeLineCap(value0);
      };
      return StrokeLineCap;
  })();
  var PatternUnits = (function () {
      function PatternUnits(value0) {
          this.value0 = value0;
      };
      PatternUnits.create = function (value0) {
          return new PatternUnits(value0);
      };
      return PatternUnits;
  })();
  var Style = (function () {
      function Style(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      Style.create = function (value0) {
          return function (value1) {
              return new Style(value0, value1);
          };
      };
      return Style;
  })();
  var Class = (function () {
      function Class(value0) {
          this.value0 = value0;
      };
      Class.create = function (value0) {
          return new Class(value0);
      };
      return Class;
  })();
  var Text = (function () {
      function Text(value0) {
          this.value0 = value0;
      };
      Text.create = function (value0) {
          return new Text(value0);
      };
      return Text;
  })();
  var Type = (function () {
      function Type(value0) {
          this.value0 = value0;
      };
      Type.create = function (value0) {
          return new Type(value0);
      };
      return Type;
  })();
  var showOne = function (v) {
      return v.value0.showValue(v.value0.value);
  }; 
  var showAttr = new Data_Show.Show(function (v) {
      if (v instanceof CX) {
          return "CX: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof CY) {
          return "CY: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof R) {
          return "R: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof X) {
          return "X: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof Y) {
          return "Y: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof DX) {
          return "DX: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof DY) {
          return "DY: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof Height) {
          return "Height: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof Width) {
          return "Width: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof StrokeWidth) {
          return "StrokeWidth: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof StrokeOpacity) {
          return "StrokeOpacity: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof FillOpacity) {
          return "FillOpacity: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof Opacity) {
          return "Opacity: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof D) {
          return "D: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof Id) {
          return "Id: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof StrokeLineCap) {
          return "StrokeLineCap: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof PatternUnits) {
          return "PatternUnits: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof Style) {
          return "Style: " + (v.value0 + (" " + Data_Exists.runExists(showOne)(v.value1)));
      };
      if (v instanceof Class) {
          return "Class: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof Text) {
          return "Text: " + Data_Exists.runExists(showOne)(v.value0);
      };
      if (v instanceof Type) {
          return "Type: " + Data_Exists.runExists(showOne)(v.value0);
      };
      throw new Error("Failed pattern match at TaglessD3.AttrNew line 47, column 3 - line 47, column 47: " + [ v.constructor.name ]);
  });                                                                                         
  var renderArrayOfAttributes = function (attrs) {
      var go = function (acc) {
          return function (attr) {
              return new Data_List_Types.Cons(Data_Show.show(showAttr)(attr), acc);
          };
      };
      return Data_Foldable.intercalate(Data_List_Types.foldableList)(Data_Monoid.monoidString)(", ")(Data_Foldable.foldl(Data_List_Types.foldableList)(go)(Data_List_Types.Nil.value)(attrs));
  };
  var dummyD3Op = function (s) {
      return function (a) {
          return Control_Applicative.pure(Control_Monad_Eff.applicativeEff)(Data_Unit.unit);
      };
  };
  var attributes = function (dictFoldable) {
      return Data_List.fromFoldable(dictFoldable);
  };
  var attrString = function (s) {
      return Data_Exists.mkExists(new D3Attr({
          value: s, 
          showValue: Data_Show.show(Data_Show.showString), 
          apply: dummyD3Op
      }));
  };
  var attrInt = function (i) {
      return Data_Exists.mkExists(new D3Attr({
          value: i, 
          showValue: Data_Show.show(Data_Show.showInt), 
          apply: dummyD3Op
      }));
  };
  var attrCharP = function (fc) {
      return Data_Exists.mkExists(new D3Attr({
          value: fc, 
          showValue: Data_Function["const"]("(function)"), 
          apply: dummyD3Op
      }));
  };
  exports["CX"] = CX;
  exports["CY"] = CY;
  exports["R"] = R;
  exports["X"] = X;
  exports["Y"] = Y;
  exports["DX"] = DX;
  exports["DY"] = DY;
  exports["Height"] = Height;
  exports["Width"] = Width;
  exports["StrokeWidth"] = StrokeWidth;
  exports["StrokeOpacity"] = StrokeOpacity;
  exports["FillOpacity"] = FillOpacity;
  exports["Opacity"] = Opacity;
  exports["D"] = D;
  exports["Id"] = Id;
  exports["StrokeLineCap"] = StrokeLineCap;
  exports["PatternUnits"] = PatternUnits;
  exports["Style"] = Style;
  exports["Class"] = Class;
  exports["Text"] = Text;
  exports["Type"] = Type;
  exports["attrCharP"] = attrCharP;
  exports["attrInt"] = attrInt;
  exports["attrString"] = attrString;
  exports["attributes"] = attributes;
  exports["renderArrayOfAttributes"] = renderArrayOfAttributes;
  exports["showAttr"] = showAttr;
})(PS["TaglessD3.AttrNew"] = PS["TaglessD3.AttrNew"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var D3_Base = PS["D3.Base"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Prelude = PS["Prelude"];
  var TaglessD3_AttrNew = PS["TaglessD3.AttrNew"];
  var TaglessD3_Base = PS["TaglessD3.Base"];        
  var ArrayD = (function () {
      function ArrayD(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      ArrayD.create = function (value0) {
          return function (value1) {
              return new ArrayD(value0, value1);
          };
      };
      return ArrayD;
  })();
  var HierarchyD = (function () {
      function HierarchyD(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      HierarchyD.create = function (value0) {
          return function (value1) {
              return new HierarchyD(value0, value1);
          };
      };
      return HierarchyD;
  })();
  var AbstractSelection = function (__superclass_Control$dotMonad$dotMonad_0, append, attrs, d3Select, d3SelectAll, dataBind, enter, exit, insert, merge, remove, select, selectAll, transition) {
      this["__superclass_Control.Monad.Monad_0"] = __superclass_Control$dotMonad$dotMonad_0;
      this.append = append;
      this.attrs = attrs;
      this.d3Select = d3Select;
      this.d3SelectAll = d3SelectAll;
      this.dataBind = dataBind;
      this.enter = enter;
      this.exit = exit;
      this.insert = insert;
      this.merge = merge;
      this.remove = remove;
      this.select = select;
      this.selectAll = selectAll;
      this.transition = transition;
  };
  var transition = function (dict) {
      return dict.transition;
  };
  var selectAll = function (dict) {
      return dict.selectAll;
  };
  var select = function (dict) {
      return dict.select;
  };
  var remove = function (dict) {
      return dict.remove;
  };
  var merge = function (dict) {
      return dict.merge;
  };
  var insert = function (dict) {
      return dict.insert;
  };
  var exit = function (dict) {
      return dict.exit;
  };
  var enter = function (dict) {
      return dict.enter;
  };
  var dataBind = function (dict) {
      return dict.dataBind;
  };
  var d3SelectAll = function (dict) {
      return dict.d3SelectAll;
  };
  var d3Select = function (dict) {
      return dict.d3Select;
  };
  var attrs = function (dict) {
      return dict.attrs;
  };
  var append = function (dict) {
      return dict.append;
  };
  exports["ArrayD"] = ArrayD;
  exports["HierarchyD"] = HierarchyD;
  exports["AbstractSelection"] = AbstractSelection;
  exports["append"] = append;
  exports["attrs"] = attrs;
  exports["d3Select"] = d3Select;
  exports["d3SelectAll"] = d3SelectAll;
  exports["dataBind"] = dataBind;
  exports["enter"] = enter;
  exports["exit"] = exit;
  exports["insert"] = insert;
  exports["merge"] = merge;
  exports["remove"] = remove;
  exports["select"] = select;
  exports["selectAll"] = selectAll;
  exports["transition"] = transition;
})(PS["TaglessD3.Selection"] = PS["TaglessD3.Selection"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var D3_Selection = PS["D3.Selection"];
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Class = PS["Control.Monad.Eff.Class"];
  var Control_Monad_Eff_Exception = PS["Control.Monad.Eff.Exception"];
  var Control_Monad_Eff_Unsafe = PS["Control.Monad.Eff.Unsafe"];
  var Control_Monad_State = PS["Control.Monad.State"];
  var Control_Monad_State_Trans = PS["Control.Monad.State.Trans"];
  var Control_Monad_Trans_Class = PS["Control.Monad.Trans.Class"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Newtype = PS["Data.Newtype"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Unit = PS["Data.Unit"];
  var TaglessD3_Base = PS["TaglessD3.Base"];
  var TaglessD3_Selection = PS["TaglessD3.Selection"];
  var Unsafe_Coerce = PS["Unsafe.Coerce"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Monad_State_Class = PS["Control.Monad.State.Class"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Data_Show = PS["Data.Show"];
  var runD3Monad = function (v) {
      return Control_Monad_State_Trans.runStateT(v);
  };
  var monadStateD3Monad = Control_Monad_State_Trans.monadStateStateT(Control_Monad_Eff.monadEff);    
  var monadD3Monad = Control_Monad_State_Trans.monadStateT(Control_Monad_Eff.monadEff);      
  var fsState = function (v) {
      return Control_Applicative.liftA1(Control_Monad_Eff.applicativeEff)(Data_Tuple.snd)(Control_Monad_State_Trans.runStateT(v)(Data_Maybe.Nothing.value));
  };
  var bindD3Monad = Control_Monad_State_Trans.bindStateT(Control_Monad_Eff.monadEff);  
  var applicativeD3Monad = Control_Monad_State_Trans.applicativeStateT(Control_Monad_Eff.monadEff);
  var selectionDummySelection = new TaglessD3_Selection.AbstractSelection(function () {
      return monadD3Monad;
  }, function (element) {
      return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.get(monadStateD3Monad))(function (v) {
          return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.put(monadStateD3Monad)(Data_Functor.map(Data_Maybe.functorMaybe)(function ($37) {
              return Control_Monad_Eff_Unsafe.unsafePerformEff(D3_Selection.append(Data_Show.show(TaglessD3_Base.showD3ElementType)(element))($37));
          })(v)))(function () {
              return Control_Applicative.pure(applicativeD3Monad)(Data_Unit.unit);
          });
      });
  }, function (attributes) {
      return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.get(monadStateD3Monad))(function (v) {
          return Control_Applicative.pure(applicativeD3Monad)(Data_Unit.unit);
      });
  }, function (selector) {
      return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.put(monadStateD3Monad)(Data_Maybe.Just.create(Control_Monad_Eff_Unsafe.unsafePerformEff(D3_Selection.d3Select(selector)))))(function () {
          return Control_Applicative.pure(applicativeD3Monad)(Data_Unit.unit);
      });
  }, function (selector) {
      return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.put(monadStateD3Monad)(Data_Maybe.Just.create(Control_Monad_Eff_Unsafe.unsafePerformEff(D3_Selection.d3SelectAll(selector)))))(function () {
          return Control_Applicative.pure(applicativeD3Monad)(Data_Unit.unit);
      });
  }, function (ds) {
      return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.get(monadStateD3Monad))(function (v) {
          var s = (function () {
              if (ds instanceof TaglessD3_Selection.ArrayD && ds.value1 instanceof Data_Maybe.Just) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function ($38) {
                      return Control_Monad_Eff_Unsafe.unsafePerformEff(D3_Selection.dataBindIndexArray(ds.value0)(ds.value1.value0)($38));
                  })(v);
              };
              if (ds instanceof TaglessD3_Selection.ArrayD && ds.value1 instanceof Data_Maybe.Nothing) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function ($39) {
                      return Control_Monad_Eff_Unsafe.unsafePerformEff(D3_Selection.dataBindArray(ds.value0)($39));
                  })(v);
              };
              if (ds instanceof TaglessD3_Selection.HierarchyD && ds.value1 instanceof Data_Maybe.Just) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function ($40) {
                      return Control_Monad_Eff_Unsafe.unsafePerformEff(D3_Selection.dataBindIndexHierarchy(ds.value0)(ds.value1.value0)($40));
                  })(v);
              };
              if (ds instanceof TaglessD3_Selection.HierarchyD && ds.value1 instanceof Data_Maybe.Nothing) {
                  return Data_Functor.map(Data_Maybe.functorMaybe)(function ($41) {
                      return Control_Monad_Eff_Unsafe.unsafePerformEff(D3_Selection.dataBindHierarchy(ds.value0)($41));
                  })(v);
              };
              throw new Error("Failed pattern match at D3Impl line 106, column 17 - line 110, column 111: " + [ ds.constructor.name ]);
          })();
          return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.put(monadStateD3Monad)(Unsafe_Coerce.unsafeCoerce(s)))(function () {
              return Control_Applicative.pure(applicativeD3Monad)(Data_Unit.unit);
          });
      });
  }, Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.get(monadStateD3Monad))(function (v) {
      return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.put(monadStateD3Monad)(Data_Functor.map(Data_Maybe.functorMaybe)(function ($42) {
          return Control_Monad_Eff_Unsafe.unsafePerformEff(D3_Selection.enter($42));
      })(v)))(function () {
          return Control_Applicative.pure(applicativeD3Monad)(Data_Unit.unit);
      });
  }), Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.get(monadStateD3Monad))(function (v) {
      return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.put(monadStateD3Monad)(Data_Functor.map(Data_Maybe.functorMaybe)(function ($43) {
          return Control_Monad_Eff_Unsafe.unsafePerformEff(D3_Selection.exit($43));
      })(v)))(function () {
          return Control_Applicative.pure(applicativeD3Monad)(Data_Unit.unit);
      });
  }), function (element) {
      return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.get(monadStateD3Monad))(function (v) {
          return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.put(monadStateD3Monad)(Data_Functor.map(Data_Maybe.functorMaybe)(function ($44) {
              return Control_Monad_Eff_Unsafe.unsafePerformEff(D3_Selection.insert(Data_Show.show(TaglessD3_Base.showD3ElementType)(element))($44));
          })(v)))(function () {
              return Control_Applicative.pure(applicativeD3Monad)(Data_Unit.unit);
          });
      });
  }, function (selection) {
      return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.get(monadStateD3Monad))(function (v) {
          var merging = Control_Monad_Eff_Unsafe.unsafePerformEff(fsState(selection));
          var merged = Control_Apply.apply(Data_Maybe.applyMaybe)(Data_Functor.map(Data_Maybe.functorMaybe)(D3_Selection.merge)(merging))(v);
          return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.put(monadStateD3Monad)(Data_Functor.map(Data_Maybe.functorMaybe)(Control_Monad_Eff_Unsafe.unsafePerformEff)(merged)))(function () {
              return Control_Applicative.pure(applicativeD3Monad)(Data_Unit.unit);
          });
      });
  }, Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.get(monadStateD3Monad))(function (v) {
      return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.put(monadStateD3Monad)(Data_Functor.map(Data_Maybe.functorMaybe)(function ($45) {
          return Control_Monad_Eff_Unsafe.unsafePerformEff(D3_Selection.remove($45));
      })(v)))(function () {
          return Control_Applicative.pure(applicativeD3Monad)(Data_Unit.unit);
      });
  }), function (selector) {
      return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.get(monadStateD3Monad))(function (v) {
          return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.put(monadStateD3Monad)(Data_Functor.map(Data_Maybe.functorMaybe)(function ($46) {
              return Control_Monad_Eff_Unsafe.unsafePerformEff(D3_Selection.select(selector)($46));
          })(v)))(function () {
              return Control_Applicative.pure(applicativeD3Monad)(Data_Unit.unit);
          });
      });
  }, function (selector) {
      return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.get(monadStateD3Monad))(function (v) {
          return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.put(monadStateD3Monad)(Data_Functor.map(Data_Maybe.functorMaybe)(function ($47) {
              return Control_Monad_Eff_Unsafe.unsafePerformEff(D3_Selection.selectAll(selector)($47));
          })(v)))(function () {
              return Control_Applicative.pure(applicativeD3Monad)(Data_Unit.unit);
          });
      });
  }, function (t) {
      return Control_Bind.bind(bindD3Monad)(Control_Monad_State_Class.get(monadStateD3Monad))(function (v) {
          return Control_Applicative.pure(applicativeD3Monad)(Data_Unit.unit);
      });
  });
  exports["fsState"] = fsState;
  exports["runD3Monad"] = runD3Monad;
  exports["applicativeD3Monad"] = applicativeD3Monad;
  exports["bindD3Monad"] = bindD3Monad;
  exports["monadD3Monad"] = monadD3Monad;
  exports["monadStateD3Monad"] = monadStateD3Monad;
  exports["selectionDummySelection"] = selectionDummySelection;
})(PS["D3Impl"] = PS["D3Impl"] || {});
(function(exports) {
    "use strict";

  exports.toNumber = function (n) {
    return n;
  };
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Data.Int"];
  var Data_Boolean = PS["Data.Boolean"];
  var Data_BooleanAlgebra = PS["Data.BooleanAlgebra"];
  var Data_Bounded = PS["Data.Bounded"];
  var Data_Eq = PS["Data.Eq"];
  var Data_Function = PS["Data.Function"];
  var Data_Int_Bits = PS["Data.Int.Bits"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Ord = PS["Data.Ord"];
  var $$Math = PS["Math"];
  var Partial_Unsafe = PS["Partial.Unsafe"];
  var Data_HeytingAlgebra = PS["Data.HeytingAlgebra"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  exports["toNumber"] = $foreign.toNumber;
})(PS["Data.Int"] = PS["Data.Int"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Newtype = PS["Data.Newtype"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Profunctor = function (dimap) {
      this.dimap = dimap;
  };
  var profunctorFn = new Profunctor(function (a2b) {
      return function (c2d) {
          return function (b2c) {
              return function ($9) {
                  return c2d(b2c(a2b($9)));
              };
          };
      };
  });
  var dimap = function (dict) {
      return dict.dimap;
  };
  exports["Profunctor"] = Profunctor;
  exports["dimap"] = dimap;
  exports["profunctorFn"] = profunctorFn;
})(PS["Data.Profunctor"] = PS["Data.Profunctor"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var Prelude = PS["Prelude"];
  var Data_Profunctor = PS["Data.Profunctor"];
  var Data_Tuple = PS["Data.Tuple"];
  var Data_Functor = PS["Data.Functor"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Category = PS["Control.Category"];        
  var Strong = function (__superclass_Data$dotProfunctor$dotProfunctor_0, first, second) {
      this["__superclass_Data.Profunctor.Profunctor_0"] = __superclass_Data$dotProfunctor$dotProfunctor_0;
      this.first = first;
      this.second = second;
  };
  var strongFn = new Strong(function () {
      return Data_Profunctor.profunctorFn;
  }, function (a2b) {
      return function (v) {
          return new Data_Tuple.Tuple(a2b(v.value0), v.value1);
      };
  }, Data_Functor.map(Data_Tuple.functorTuple));
  var second = function (dict) {
      return dict.second;
  };
  var first = function (dict) {
      return dict.first;
  };
  exports["Strong"] = Strong;
  exports["first"] = first;
  exports["second"] = second;
  exports["strongFn"] = strongFn;
})(PS["Data.Profunctor.Strong"] = PS["Data.Profunctor.Strong"] || {});
(function(exports) {
    "use strict";

  exports.divide = function(x) {
      return function(y) {
          return x / y;
      };
  };
})(PS["Number"] = PS["Number"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var $foreign = PS["Number"];
  exports["divide"] = $foreign.divide;
})(PS["Number"] = PS["Number"] || {});
(function(exports) {
  // Generated by psc version 0.10.7
  "use strict";
  var TaglessD3_AttrNew = PS["TaglessD3.AttrNew"];
  var Data_List = PS["Data.List"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var Data_Profunctor_Strong = PS["Data.Profunctor.Strong"];
  var Data_Tuple = PS["Data.Tuple"];
  var Prelude = PS["Prelude"];
  var TaglessD3_Base = PS["TaglessD3.Base"];
  var TaglessD3_Selection = PS["TaglessD3.Selection"];
  var Data_Semigroup = PS["Data.Semigroup"];
  var Data_Show = PS["Data.Show"];
  var Data_Functor = PS["Data.Functor"];
  var Data_Function = PS["Data.Function"];
  var Control_Semigroupoid = PS["Control.Semigroupoid"];
  var Control_Apply = PS["Control.Apply"];
  var Control_Monad = PS["Control.Monad"];
  var Control_Applicative = PS["Control.Applicative"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Unit = PS["Data.Unit"];        
  var D3S = (function () {
      function D3S(value0, value1) {
          this.value0 = value0;
          this.value1 = value1;
      };
      D3S.create = function (value0) {
          return function (value1) {
              return new D3S(value0, value1);
          };
      };
      return D3S;
  })();
  var FakeSelection = (function () {
      function FakeSelection(value0) {
          this.value0 = value0;
      };
      FakeSelection.create = function (value0) {
          return new FakeSelection(value0);
      };
      return FakeSelection;
  })();
  var showD3Structure = new Data_Show.Show(function (v) {
      return "Selection: " + (v.value0 + ("\x0a\x09" + Data_Show.show(Data_Show.showArray(Data_Show.showArray(Data_Show.showString)))(v.value1)));
  });
  var semigroupD3Structure = new Data_Semigroup.Semigroup(function (v) {
      return function (v1) {
          return new D3S(v.value0, Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value1)(v1.value1));
      };
  });
  var runStructure = function (v) {
      return function ($54) {
          return Data_Tuple.snd(v.value0($54));
      };
  };
  var run = function (v) {
      return v.value0;
  };
  var monoidD3Structure = new Data_Monoid.Monoid(function () {
      return semigroupD3Structure;
  }, new D3S("", [  ]));
  var merge$prime = function (v) {
      return function (v1) {
          return new Data_Tuple.Tuple(Data_Unit.unit, D3S.create(v1.value0)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v1.value1)([ [ "D3Merge", "how do we capture the merging selection's name here???" ] ])));
      };
  };
  var functorFakeSelection = new Data_Functor.Functor(function (f) {
      return function (v) {
          return FakeSelection.create(function ($56) {
              return Data_Profunctor_Strong.first(Data_Profunctor_Strong.strongFn)(f)(v.value0($56));
          });
      };
  });
  var monadFakeSelection = new Control_Monad.Monad(function () {
      return applicativeFakeSelection;
  }, function () {
      return bindFakeSelection;
  });
  var bindFakeSelection = new Control_Bind.Bind(function () {
      return applyFakeSelection;
  }, function (v) {
      return function (k) {
          return FakeSelection.create(function (z0) {
              var az1 = v.value0(z0);
              return run(k(Data_Tuple.fst(az1)))(Data_Tuple.snd(az1));
          });
      };
  });
  var applyFakeSelection = new Control_Apply.Apply(function () {
      return functorFakeSelection;
  }, Control_Monad.ap(monadFakeSelection));
  var applicativeFakeSelection = new Control_Applicative.Applicative(function () {
      return applyFakeSelection;
  }, function (a) {
      return new FakeSelection(function (z) {
          return new Data_Tuple.Tuple(a, z);
      });
  });
  var addD3Statement = function (v) {
      return function (statements$prime) {
          return D3S.create(v.value0)(Data_Semigroup.append(Data_Semigroup.semigroupArray)(v.value1)([ statements$prime ]));
      };
  };
  var append$prime = function (element) {
      return function (d3s) {
          return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ "append", Data_Show.show(TaglessD3_Base.showD3ElementType)(element) ]));
      };
  };
  var attrs$prime = function (as) {
      return function (d3s) {
          return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ TaglessD3_AttrNew.renderArrayOfAttributes(as) ]));
      };
  };
  var d3Select$prime = function (selector) {
      return function (d3s) {
          return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ "D3Select", selector ]));
      };
  };
  var d3SelectAll$prime = function (selector) {
      return function (d3s) {
          return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ "D3SelectAll", selector ]));
      };
  };
  var dataBind = function (v) {
      return function (d3s) {
          if (v instanceof TaglessD3_Selection.ArrayD && v.value1 instanceof Data_Maybe.Just) {
              return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ "Data from Array with index function" ]));
          };
          if (v instanceof TaglessD3_Selection.ArrayD && v.value1 instanceof Data_Maybe.Nothing) {
              return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ "Data from Array (no index fn)" ]));
          };
          if (v instanceof TaglessD3_Selection.HierarchyD && v.value1 instanceof Data_Maybe.Just) {
              return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ "Data from Hierarchy with index function" ]));
          };
          if (v instanceof TaglessD3_Selection.HierarchyD && v.value1 instanceof Data_Maybe.Nothing) {
              return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ "Data from Hierarchy (no index fn)" ]));
          };
          throw new Error("Failed pattern match at TaglessD3.StringImpl line 103, column 1 - line 103, column 100: " + [ v.constructor.name, d3s.constructor.name ]);
      };
  };
  var enter$prime = function (d3s) {
      return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ "Enter" ]));
  };
  var exit$prime = function (d3s) {
      return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ "Exit" ]));
  };
  var insert$prime = function (element) {
      return function (d3s) {
          return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ "insert", Data_Show.show(TaglessD3_Base.showD3ElementType)(element) ]));
      };
  };
  var remove$prime = function (d3s) {
      return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ "Remove" ]));
  };
  var select$prime = function (selector) {
      return function (d3s) {
          return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ "select", selector ]));
      };
  };
  var selectAll$prime = function (selector) {
      return function (d3s) {
          return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ "selectAll", selector ]));
      };
  };
  var transition$prime = function (t) {
      return function (d3s) {
          return Data_Tuple.Tuple.create(Data_Unit.unit)(addD3Statement(d3s)([ Data_Show.show(TaglessD3_Base.showD3Transition)(t) ]));
      };
  };
  var selectionDummySelection = new TaglessD3_Selection.AbstractSelection(function () {
      return monadFakeSelection;
  }, function (element) {
      return FakeSelection.create(append$prime(element));
  }, function (attributes) {
      return FakeSelection.create(attrs$prime(attributes));
  }, function (selector) {
      return FakeSelection.create(d3Select$prime(selector));
  }, function (selector) {
      return FakeSelection.create(d3SelectAll$prime(selector));
  }, function (d) {
      return FakeSelection.create(dataBind(d));
  }, FakeSelection.create(enter$prime), FakeSelection.create(exit$prime), function (element) {
      return FakeSelection.create(insert$prime(element));
  }, function (selection) {
      return FakeSelection.create(merge$prime(selection));
  }, FakeSelection.create(remove$prime), function (selector) {
      return FakeSelection.create(select$prime(selector));
  }, function (selector) {
      return FakeSelection.create(selectAll$prime(selector));
  }, function (t) {
      return FakeSelection.create(transition$prime(t));
  });
  exports["D3S"] = D3S;
  exports["FakeSelection"] = FakeSelection;
  exports["addD3Statement"] = addD3Statement;
  exports["dataBind"] = dataBind;
  exports["run"] = run;
  exports["runStructure"] = runStructure;
  exports["semigroupD3Structure"] = semigroupD3Structure;
  exports["monoidD3Structure"] = monoidD3Structure;
  exports["showD3Structure"] = showD3Structure;
  exports["functorFakeSelection"] = functorFakeSelection;
  exports["applyFakeSelection"] = applyFakeSelection;
  exports["applicativeFakeSelection"] = applicativeFakeSelection;
  exports["bindFakeSelection"] = bindFakeSelection;
  exports["monadFakeSelection"] = monadFakeSelection;
  exports["selectionDummySelection"] = selectionDummySelection;
})(PS["TaglessD3.StringImpl"] = PS["TaglessD3.StringImpl"] || {});
(function(exports) {
    "use strict";
  var Control_Monad_Eff = PS["Control.Monad.Eff"];
  var Control_Monad_Eff_Console = PS["Control.Monad.Eff.Console"];
  var D3_Base = PS["D3.Base"];
  var D3Impl = PS["D3Impl"];
  var Data_Int = PS["Data.Int"];
  var Data_Maybe = PS["Data.Maybe"];
  var Data_Monoid = PS["Data.Monoid"];
  var $$Number = PS["Number"];
  var Prelude = PS["Prelude"];
  var TaglessD3_AttrNew = PS["TaglessD3.AttrNew"];
  var TaglessD3_Base = PS["TaglessD3.Base"];
  var TaglessD3_Selection = PS["TaglessD3.Selection"];
  var TaglessD3_StringImpl = PS["TaglessD3.StringImpl"];
  var Data_Function = PS["Data.Function"];
  var Control_Bind = PS["Control.Bind"];
  var Data_Foldable = PS["Data.Foldable"];
  var Data_Show = PS["Data.Show"];        
  var myTransition = TaglessD3_Base.NamedTransition.create("t1")(new TaglessD3_Base.MS(500));
  var myData$prime = new TaglessD3_Selection.ArrayD([ 1, 2, 3, 4, 5 ], new Data_Maybe.Just(function (i) {
      return $$Number.divide(Data_Int.toNumber(i))(2.0);
  }));
  var myData = new TaglessD3_Selection.ArrayD([ 1, 2, 3, 4, 5 ], Data_Maybe.Nothing.value);
  var lp = function (v) {
      if (v.name === "awn") {
          return "a";
      };
      if (v.age === 0) {
          return "b";
      };
      return "c";
  };
  var d3Script = function (dictAbstractSelection) {
      return Control_Bind.bind((dictAbstractSelection["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(TaglessD3_Selection.d3Select(dictAbstractSelection)("#chart"))(function () {
          return TaglessD3_Selection.append(dictAbstractSelection)(TaglessD3_Base.HTMLDiv.value);
      });
  };

  // array data with lambda index fn
  var attrList = TaglessD3_AttrNew.attributes(Data_Foldable.foldableArray)([ TaglessD3_AttrNew.CX.create(TaglessD3_AttrNew.attrInt(1)), TaglessD3_AttrNew.Style.create("width")(TaglessD3_AttrNew.attrString("48%")), TaglessD3_AttrNew.Style.create("height")(TaglessD3_AttrNew.attrCharP(lp)) ]);
  var d3Script$prime = function (dictAbstractSelection) {
      return Control_Bind.bind((dictAbstractSelection["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(TaglessD3_Selection.d3Select(dictAbstractSelection)("#chart"))(function () {
          return Control_Bind.bind((dictAbstractSelection["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(TaglessD3_Selection.dataBind(dictAbstractSelection)(myData$prime))(function () {
              return Control_Bind.bind((dictAbstractSelection["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(TaglessD3_Selection.enter(dictAbstractSelection))(function () {
                  return Control_Bind.bind((dictAbstractSelection["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(TaglessD3_Selection.append(dictAbstractSelection)(TaglessD3_Base.SvgText.value))(function () {
                      return Control_Bind.bind((dictAbstractSelection["__superclass_Control.Monad.Monad_0"]())["__superclass_Control.Bind.Bind_1"]())(TaglessD3_Selection.attrs(dictAbstractSelection)(attrList))(function () {
                          return TaglessD3_Selection.transition(dictAbstractSelection)(myTransition);
                      });
                  });
              });
          });
      });
  };
  var main = (function () {
      var s = D3Impl.runD3Monad(d3Script(D3Impl.selectionDummySelection))(Data_Maybe.Nothing.value);
      return function __do() {
          Control_Monad_Eff_Console.log("\x0a\x0a\x0a====== cool beans =======\x0a\x0a\x0a")();
          var ss = Data_Show.show(TaglessD3_StringImpl.showD3Structure)(TaglessD3_StringImpl.runStructure(d3Script$prime(TaglessD3_StringImpl.selectionDummySelection))(Data_Monoid.mempty(TaglessD3_StringImpl.monoidD3Structure)));
          return Control_Monad_Eff_Console.log(ss)();
      };
  })();
  exports["attrList"] = attrList;
  exports["d3Script"] = d3Script;
  exports["d3Script'"] = d3Script$prime;
  exports["lp"] = lp;
  exports["main"] = main;
  exports["myData"] = myData;
  exports["myData'"] = myData$prime;
  exports["myTransition"] = myTransition;
})(PS["Main"] = PS["Main"] || {});
PS["Main"].main();
